$date
	Thu Jun 19 14:44:49 2025
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var wire 1 # led_out [3] $end
$var wire 1 $ led_out [2] $end
$var wire 1 % led_out [1] $end
$var wire 1 & led_out [0] $end

$scope module uut $end
$var wire 1 ' clk $end
$var wire 1 ( reset $end
$var wire 1 # led_out [3] $end
$var wire 1 $ led_out [2] $end
$var wire 1 % led_out [1] $end
$var wire 1 & led_out [0] $end
$var wire 1 ) result_debug [7] $end
$var wire 1 * result_debug [6] $end
$var wire 1 + result_debug [5] $end
$var wire 1 , result_debug [4] $end
$var wire 1 - result_debug [3] $end
$var wire 1 . result_debug [2] $end
$var wire 1 / result_debug [1] $end
$var wire 1 0 result_debug [0] $end
$var wire 1 1 instruction [7] $end
$var wire 1 2 instruction [6] $end
$var wire 1 3 instruction [5] $end
$var wire 1 4 instruction [4] $end
$var wire 1 5 instruction [3] $end
$var wire 1 6 instruction [2] $end
$var wire 1 7 instruction [1] $end
$var wire 1 8 instruction [0] $end
$var wire 1 9 reg_write $end
$var wire 1 : mem_write $end
$var wire 1 ; alu_src $end
$var wire 1 < pc_write $end
$var wire 1 = mem_to_reg $end
$var wire 1 > imm_signed $end
$var wire 1 ? alu_op [2] $end
$var wire 1 @ alu_op [1] $end
$var wire 1 A alu_op [0] $end

$scope module u_datapath $end
$var wire 1 ' clk $end
$var wire 1 ( reset $end
$var wire 1 9 reg_write $end
$var wire 1 : mem_write $end
$var wire 1 ; alu_src $end
$var wire 1 < pc_write $end
$var wire 1 > imm_signed $end
$var wire 1 ? alu_op [2] $end
$var wire 1 @ alu_op [1] $end
$var wire 1 A alu_op [0] $end
$var wire 1 = mem_to_reg $end
$var wire 1 1 instruction_out [7] $end
$var wire 1 2 instruction_out [6] $end
$var wire 1 3 instruction_out [5] $end
$var wire 1 4 instruction_out [4] $end
$var wire 1 5 instruction_out [3] $end
$var wire 1 6 instruction_out [2] $end
$var wire 1 7 instruction_out [1] $end
$var wire 1 8 instruction_out [0] $end
$var wire 1 ) result_out [7] $end
$var wire 1 * result_out [6] $end
$var wire 1 + result_out [5] $end
$var wire 1 , result_out [4] $end
$var wire 1 - result_out [3] $end
$var wire 1 . result_out [2] $end
$var wire 1 / result_out [1] $end
$var wire 1 0 result_out [0] $end
$var wire 1 B pc [7] $end
$var wire 1 C pc [6] $end
$var wire 1 D pc [5] $end
$var wire 1 E pc [4] $end
$var wire 1 F pc [3] $end
$var wire 1 G pc [2] $end
$var wire 1 H pc [1] $end
$var wire 1 I pc [0] $end
$var wire 1 J instruction [7] $end
$var wire 1 K instruction [6] $end
$var wire 1 L instruction [5] $end
$var wire 1 M instruction [4] $end
$var wire 1 N instruction [3] $end
$var wire 1 O instruction [2] $end
$var wire 1 P instruction [1] $end
$var wire 1 Q instruction [0] $end
$var wire 1 R reg_data1 [7] $end
$var wire 1 S reg_data1 [6] $end
$var wire 1 T reg_data1 [5] $end
$var wire 1 U reg_data1 [4] $end
$var wire 1 V reg_data1 [3] $end
$var wire 1 W reg_data1 [2] $end
$var wire 1 X reg_data1 [1] $end
$var wire 1 Y reg_data1 [0] $end
$var wire 1 Z reg_data2 [7] $end
$var wire 1 [ reg_data2 [6] $end
$var wire 1 \ reg_data2 [5] $end
$var wire 1 ] reg_data2 [4] $end
$var wire 1 ^ reg_data2 [3] $end
$var wire 1 _ reg_data2 [2] $end
$var wire 1 ` reg_data2 [1] $end
$var wire 1 a reg_data2 [0] $end
$var wire 1 b alu_result [7] $end
$var wire 1 c alu_result [6] $end
$var wire 1 d alu_result [5] $end
$var wire 1 e alu_result [4] $end
$var wire 1 f alu_result [3] $end
$var wire 1 g alu_result [2] $end
$var wire 1 h alu_result [1] $end
$var wire 1 i alu_result [0] $end
$var wire 1 j mem_data [7] $end
$var wire 1 k mem_data [6] $end
$var wire 1 l mem_data [5] $end
$var wire 1 m mem_data [4] $end
$var wire 1 n mem_data [3] $end
$var wire 1 o mem_data [2] $end
$var wire 1 p mem_data [1] $end
$var wire 1 q mem_data [0] $end
$var wire 1 r write_data [7] $end
$var wire 1 s write_data [6] $end
$var wire 1 t write_data [5] $end
$var wire 1 u write_data [4] $end
$var wire 1 v write_data [3] $end
$var wire 1 w write_data [2] $end
$var wire 1 x write_data [1] $end
$var wire 1 y write_data [0] $end
$var wire 1 z alu_operand_b [7] $end
$var wire 1 { alu_operand_b [6] $end
$var wire 1 | alu_operand_b [5] $end
$var wire 1 } alu_operand_b [4] $end
$var wire 1 ~ alu_operand_b [3] $end
$var wire 1 !! alu_operand_b [2] $end
$var wire 1 "! alu_operand_b [1] $end
$var wire 1 #! alu_operand_b [0] $end
$var wire 1 $! opcode [3] $end
$var wire 1 %! opcode [2] $end
$var wire 1 &! opcode [1] $end
$var wire 1 '! opcode [0] $end
$var wire 1 (! reg_dst [1] $end
$var wire 1 )! reg_dst [0] $end
$var wire 1 *! reg_src [1] $end
$var wire 1 +! reg_src [0] $end
$var wire 1 ,! imm4 [3] $end
$var wire 1 -! imm4 [2] $end
$var wire 1 .! imm4 [1] $end
$var wire 1 /! imm4 [0] $end
$var wire 1 0! imm8_unsigned [7] $end
$var wire 1 1! imm8_unsigned [6] $end
$var wire 1 2! imm8_unsigned [5] $end
$var wire 1 3! imm8_unsigned [4] $end
$var wire 1 4! imm8_unsigned [3] $end
$var wire 1 5! imm8_unsigned [2] $end
$var wire 1 6! imm8_unsigned [1] $end
$var wire 1 7! imm8_unsigned [0] $end
$var wire 1 8! imm8_signed [7] $end
$var wire 1 9! imm8_signed [6] $end
$var wire 1 :! imm8_signed [5] $end
$var wire 1 ;! imm8_signed [4] $end
$var wire 1 <! imm8_signed [3] $end
$var wire 1 =! imm8_signed [2] $end
$var wire 1 >! imm8_signed [1] $end
$var wire 1 ?! imm8_signed [0] $end

$scope module u_register_file $end
$var wire 1 ' clk $end
$var wire 1 ( reset $end
$var wire 1 9 write_enable $end
$var wire 1 (! write_addr [1] $end
$var wire 1 )! write_addr [0] $end
$var wire 1 r write_data [7] $end
$var wire 1 s write_data [6] $end
$var wire 1 t write_data [5] $end
$var wire 1 u write_data [4] $end
$var wire 1 v write_data [3] $end
$var wire 1 w write_data [2] $end
$var wire 1 x write_data [1] $end
$var wire 1 y write_data [0] $end
$var wire 1 (! read_addr1 [1] $end
$var wire 1 )! read_addr1 [0] $end
$var wire 1 *! read_addr2 [1] $end
$var wire 1 +! read_addr2 [0] $end
$var reg 8 @! read_data1 [7:0] $end
$var reg 8 A! read_data2 [7:0] $end
$var reg 8 B! pc_out [7:0] $end
$var wire 1 < pc_write_enable $end
$var reg 8 C! pc [7:0] $end
$var integer 32 D! i $end
$upscope $end

$scope module u_instr_mem $end
$var wire 1 ' clk $end
$var wire 1 E! write_enable $end
$var wire 1 B address [7] $end
$var wire 1 C address [6] $end
$var wire 1 D address [5] $end
$var wire 1 E address [4] $end
$var wire 1 F address [3] $end
$var wire 1 G address [2] $end
$var wire 1 H address [1] $end
$var wire 1 I address [0] $end
$var wire 1 F! write_data [7] $end
$var wire 1 G! write_data [6] $end
$var wire 1 H! write_data [5] $end
$var wire 1 I! write_data [4] $end
$var wire 1 J! write_data [3] $end
$var wire 1 K! write_data [2] $end
$var wire 1 L! write_data [1] $end
$var wire 1 M! write_data [0] $end
$var reg 8 N! read_data [7:0] $end
$var integer 32 O! i $end
$upscope $end

$scope module u_alu $end
$var wire 1 R a [7] $end
$var wire 1 S a [6] $end
$var wire 1 T a [5] $end
$var wire 1 U a [4] $end
$var wire 1 V a [3] $end
$var wire 1 W a [2] $end
$var wire 1 X a [1] $end
$var wire 1 Y a [0] $end
$var wire 1 z b [7] $end
$var wire 1 { b [6] $end
$var wire 1 | b [5] $end
$var wire 1 } b [4] $end
$var wire 1 ~ b [3] $end
$var wire 1 !! b [2] $end
$var wire 1 "! b [1] $end
$var wire 1 #! b [0] $end
$var wire 1 ? alu_op [2] $end
$var wire 1 @ alu_op [1] $end
$var wire 1 A alu_op [0] $end
$var reg 8 P! result [7:0] $end
$var wire 1 Q! zero $end
$upscope $end

$scope module u_data_mem $end
$var wire 1 ' clk $end
$var wire 1 : write_enable $end
$var wire 1 b address [7] $end
$var wire 1 c address [6] $end
$var wire 1 d address [5] $end
$var wire 1 e address [4] $end
$var wire 1 f address [3] $end
$var wire 1 g address [2] $end
$var wire 1 h address [1] $end
$var wire 1 i address [0] $end
$var wire 1 Z write_data [7] $end
$var wire 1 [ write_data [6] $end
$var wire 1 \ write_data [5] $end
$var wire 1 ] write_data [4] $end
$var wire 1 ^ write_data [3] $end
$var wire 1 _ write_data [2] $end
$var wire 1 ` write_data [1] $end
$var wire 1 a write_data [0] $end
$var reg 8 R! read_data [7:0] $end
$var integer 32 S! i $end
$upscope $end
$upscope $end

$scope module u_control $end
$var wire 1 1 instruction [7] $end
$var wire 1 2 instruction [6] $end
$var wire 1 3 instruction [5] $end
$var wire 1 4 instruction [4] $end
$var wire 1 5 instruction [3] $end
$var wire 1 6 instruction [2] $end
$var wire 1 7 instruction [1] $end
$var wire 1 8 instruction [0] $end
$var reg 1 T! reg_write $end
$var reg 1 U! mem_write $end
$var reg 1 V! alu_src $end
$var reg 1 W! pc_write $end
$var reg 3 X! alu_op [2:0] $end
$var reg 1 Y! mem_to_reg $end
$var reg 1 Z! imm_signed $end
$var wire 1 [! opcode [3] $end
$var wire 1 \! opcode [2] $end
$var wire 1 ]! opcode [1] $end
$var wire 1 ^! opcode [0] $end
$var wire 1 _! operand [3] $end
$var wire 1 `! operand [2] $end
$var wire 1 a! operand [1] $end
$var wire 1 b! operand [0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
bx @!
bx A!
b0 B!
b0 C!
bx N!
bx P!
bx R!
xT!
xU!
xV!
xW!
bx X!
xY!
xZ!
b100 D!
b100000000 O!
b100000000 S!
x&
x%
x$
x#
x0
x/
x.
x-
x,
x+
x*
x)
x8
x7
x6
x5
x4
x3
x2
x1
x9
x:
x;
x<
x=
x>
xA
x@
x?
0I
0H
0G
0F
0E
0D
0C
0B
xQ
xP
xO
xN
xM
xL
xK
xJ
xY
xX
xW
xV
xU
xT
xS
xR
xa
x`
x_
x^
x]
x\
x[
xZ
xi
xh
xg
xf
xe
xd
xc
xb
xq
xp
xo
xn
xm
xl
xk
xj
xy
xx
xw
xv
xu
xt
xs
xr
x#!
x"!
x!!
x~
x}
x|
x{
xz
x'!
x&!
x%!
x$!
x)!
x(!
x+!
x*!
x/!
x.!
x-!
x,!
x7!
x6!
x5!
x4!
03!
02!
01!
00!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x^!
x]!
x\!
x[!
xb!
xa!
x`!
x_!
1(
0'
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
xQ!
$end
#10000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
b1110001 N!
1Q
0P
0O
0N
1M
1L
1K
0J
1'!
1&!
1%!
0$!
1/!
0.!
0-!
0,!
18
07
06
05
14
13
12
01
1b!
0a!
0`!
0_!
17!
06!
05!
04!
1?!
0>!
0=!
0<!
0;!
0:!
09!
08!
1^!
1]!
1\!
0[!
0)!
0(!
1+!
0*!
b0 @!
b0 A!
0T!
0U!
0V!
1W!
b0 X!
0Y!
0Z!
1T!
1V!
0a
0`
0_
0^
0]
0\
0[
0Z
19
0:
1;
1<
0=
0>
1#!
0"!
0!!
0~
0}
0|
0{
0z
0A
0@
0?
0Y
0X
0W
0V
0U
0T
0S
0R
b1 P!
0Q!
1i
0h
0g
0f
0e
0d
0c
0b
1y
0x
0w
0v
0u
0t
0s
0r
10
0/
0.
0-
0,
0+
0*
0)
1&
0%
0$
0#
#20000
0!
0'
#30000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
b1110101 R!
1q
0p
1o
0n
1m
1l
1k
0j
#40000
0!
0'
#50000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#60000
0!
0'
#70000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#80000
0!
0'
#90000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#100000
0!
0'
#110000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#120000
0!
0'
#130000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#140000
0!
0'
#150000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#160000
0!
0'
#170000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#180000
0!
0'
#190000
1!
1'
b0 D!
b1 D!
b10 D!
b11 D!
b100 D!
#200000
0"
0!
0(
0'
#210000
1!
1'
b1 C!
b1 @!
b1 B!
1I
1Y
b10 P!
0i
1h
0y
1x
00
1/
0&
1%
#220000
0!
0'
#230000
1!
1'
b10 C!
b1110101 N!
bx R!
xq
xp
xo
xn
xm
xl
xk
xj
1O
1-!
16
1`!
15!
1=!
1!!
1)!
b110 P!
b0 @!
b10 B!
0I
1H
1g
1w
1.
1$
0Y
b101 P!
1i
0h
1y
0x
10
0/
1&
0%
#240000
0!
0'
#250000
1!
1'
b11 C!
bx N!
b0 R!
0q
0p
0o
0n
0m
0l
0k
0j
xQ
xP
xO
xN
xM
xL
xK
xJ
x'!
x&!
x%!
x$!
x/!
x.!
x-!
x,!
x8
x7
x6
x5
x4
x3
x2
x1
xb!
xa!
x`!
x_!
x7!
x6!
x5!
x4!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x#!
x"!
x!!
x~
x^!
x]!
x\!
x[!
x)!
x(!
x+!
x*!
0T!
0V!
bx P!
bx @!
bx A!
b11 B!
09
0;
xQ!
1I
xa
x`
x_
x^
x]
x\
x[
xZ
xi
xh
xg
xf
xe
xd
xc
xb
xy
xx
xw
xv
xu
xt
xs
xr
x0
x/
x.
x-
x,
x+
x*
x)
x&
x%
x$
x#
x}
x|
x{
xz
xY
xX
xW
xV
xU
xT
xS
xR
#260000
0!
0'
#270000
1!
1'
b100 C!
b11010 N!
bx R!
xq
xp
xo
xn
xm
xl
xk
xj
0Q
1P
0O
1N
1M
0L
0K
0J
1'!
0&!
0%!
0$!
0/!
1.!
0-!
1,!
08
17
06
15
14
03
02
01
0b!
1a!
0`!
1_!
07!
16!
05!
14!
0?!
1>!
0=!
1<!
1;!
1:!
19!
18!
1^!
0]!
0\!
0[!
0)!
1(!
0+!
1*!
1T!
b0 @!
b0 A!
b100 B!
19
0I
0H
1G
0a
0`
0_
0^
0]
0\
0[
0Z
0#!
0"!
0!!
0~
0}
0|
0{
0z
0Y
0X
0W
0V
0U
0T
0S
0R
b0 P!
1Q!
0i
0h
0g
0f
0e
0d
0c
0b
0y
0x
0w
0v
0u
0t
0s
0r
00
0/
0.
0-
0,
0+
0*
0)
0&
0%
0$
0#
#280000
0!
0'
#290000
1!
1'
b101 C!
b0 N!
b1110001 R!
1q
0p
0o
0n
1m
1l
1k
0j
0P
0N
0M
0'!
0.!
0,!
07
05
04
0a!
0_!
06!
04!
0>!
0<!
0;!
0:!
09!
08!
0^!
0(!
0*!
0T!
b10 @!
b10 A!
b101 B!
09
1I
1`
1"!
1X
b100 P!
0Q!
1g
1w
1.
1$
#300000
0!
0'
#310000
1!
1'
b110 C!
b0 R!
0q
0m
0l
0k
b110 B!
0I
1H
#320000
0!
0'
#330000
1!
1'
b111 C!
b111 B!
1I
#340000
0!
0'
#350000
1!
1'
b1000 C!
b1000 B!
0I
0H
0G
1F
#360000
0!
0'
#370000
1!
1'
b1001 C!
b1001 B!
1I
#380000
0!
0'
#390000
1!
1'
b1010 C!
b1010 B!
0I
1H
#4000